
Online13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000290  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000290  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d3  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000645  00000000  00000000  00000c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000488  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000423  00000000  00000000  00001afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001f1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  7a:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <segment_display>:
#define SEGMENT_PORT1 PORTD
#define SEGMENT_PORT2 PORTC
#define SEGMENT_PORT PORTA

void segment_display(char num)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	char segmentArr[10]= {0x3f,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6f};
  96:	9a e0       	ldi	r25, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	9a 95       	dec	r25
  a6:	e1 f7       	brne	.-8      	; 0xa0 <segment_display+0x1e>
	char x=num,flag=0;
	char i,n1,n2;
	n1=x%10;
  a8:	2d ec       	ldi	r18, 0xCD	; 205
  aa:	82 9f       	mul	r24, r18
  ac:	21 2d       	mov	r18, r1
  ae:	11 24       	eor	r1, r1
  b0:	32 2f       	mov	r19, r18
  b2:	36 95       	lsr	r19
  b4:	36 95       	lsr	r19
  b6:	36 95       	lsr	r19
  b8:	33 0f       	add	r19, r19
  ba:	93 2f       	mov	r25, r19
  bc:	99 0f       	add	r25, r25
  be:	99 0f       	add	r25, r25
  c0:	39 0f       	add	r19, r25
  c2:	83 1b       	sub	r24, r19
  c4:	38 2f       	mov	r19, r24
	n2=x/10;
  c6:	26 95       	lsr	r18
  c8:	26 95       	lsr	r18
  ca:	26 95       	lsr	r18

	for (i=0; i<25; i++)
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	2b c0       	rjmp	.+86     	; 0x126 <segment_display+0xa4>
	{
		SEGMENT_PORT=segmentArr[n1]<<1;
  d0:	e1 e0       	ldi	r30, 0x01	; 1
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ec 0f       	add	r30, r28
  d6:	fd 1f       	adc	r31, r29
  d8:	e3 0f       	add	r30, r19
  da:	f1 1d       	adc	r31, r1
  dc:	80 81       	ld	r24, Z
  de:	88 0f       	add	r24, r24
  e0:	8b bb       	out	0x1b, r24	; 27
		SET_BIT(PORTC,6);
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	85 bb       	out	0x15, r24	; 21
		CLEAR_BIT(PORTC,7);
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	8f 77       	andi	r24, 0x7F	; 127
  ec:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	ef e1       	ldi	r30, 0x1F	; 31
  f0:	fe e4       	ldi	r31, 0x4E	; 78
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <segment_display+0x70>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <segment_display+0x76>
  f8:	00 00       	nop
		_delay_ms(10);
		SET_BIT(PORTC,7);
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	85 bb       	out	0x15, r24	; 21
		CLEAR_BIT(PORTC,6);
 100:	85 b3       	in	r24, 0x15	; 21
 102:	8f 7b       	andi	r24, 0xBF	; 191
 104:	85 bb       	out	0x15, r24	; 21
		SEGMENT_PORT=segmentArr[n2]<<1;
 106:	e1 e0       	ldi	r30, 0x01	; 1
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	e2 0f       	add	r30, r18
 110:	f1 1d       	adc	r31, r1
 112:	80 81       	ld	r24, Z
 114:	88 0f       	add	r24, r24
 116:	8b bb       	out	0x1b, r24	; 27
 118:	ef e1       	ldi	r30, 0x1F	; 31
 11a:	fe e4       	ldi	r31, 0x4E	; 78
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <segment_display+0x9a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <segment_display+0xa0>
 122:	00 00       	nop
	char x=num,flag=0;
	char i,n1,n2;
	n1=x%10;
	n2=x/10;

	for (i=0; i<25; i++)
 124:	9f 5f       	subi	r25, 0xFF	; 255
 126:	99 31       	cpi	r25, 0x19	; 25
 128:	98 f2       	brcs	.-90     	; 0xd0 <segment_display+0x4e>
		CLEAR_BIT(PORTC,6);
		SEGMENT_PORT=segmentArr[n2]<<1;
		_delay_ms(10);
	}

}
 12a:	2a 96       	adiw	r28, 0x0a	; 10
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <set_start>:

char set_start(unsigned char start)
{
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
 140:	01 c0       	rjmp	.+2      	; 0x144 <set_start+0x8>
			_delay_ms(50);
			start++;
		}
		if (start>99)
		{
			start=0;
 142:	c0 e0       	ldi	r28, 0x00	; 0

char set_start(unsigned char start)
{
	while(1)
	{
		segment_display(start);
 144:	8c 2f       	mov	r24, r28
 146:	0e 94 41 00 	call	0x82	; 0x82 <segment_display>
		if (!READ_BIT(PIND,3))
 14a:	83 99       	sbic	0x10, 3	; 16
 14c:	03 c0       	rjmp	.+6      	; 0x154 <set_start+0x18>
		{
			while(!READ_BIT(PIND,3));
 14e:	83 9b       	sbis	0x10, 3	; 16
 150:	fe cf       	rjmp	.-4      	; 0x14e <set_start+0x12>
 152:	16 c0       	rjmp	.+44     	; 0x180 <set_start+0x44>
			_delay_ms(150);
			return start;
		}
		if (!READ_BIT(PIND,4))
 154:	84 99       	sbic	0x10, 4	; 16
 156:	03 c0       	rjmp	.+6      	; 0x15e <set_start+0x22>
		{
			while(!READ_BIT(PIND,4));
 158:	84 9b       	sbis	0x10, 4	; 16
 15a:	fe cf       	rjmp	.-4      	; 0x158 <set_start+0x1c>
			start+=10;
 15c:	c6 5f       	subi	r28, 0xF6	; 246
		}
		if (!READ_BIT(PIND,5))
 15e:	85 99       	sbic	0x10, 5	; 16
 160:	0c c0       	rjmp	.+24     	; 0x17a <set_start+0x3e>
		{
			while(!READ_BIT(PIND,5));
 162:	85 9b       	sbis	0x10, 5	; 16
 164:	fe cf       	rjmp	.-4      	; 0x162 <set_start+0x26>
 166:	2f e7       	ldi	r18, 0x7F	; 127
 168:	88 e3       	ldi	r24, 0x38	; 56
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <set_start+0x30>
 174:	00 c0       	rjmp	.+0      	; 0x176 <set_start+0x3a>
 176:	00 00       	nop
			_delay_ms(50);
			start++;
 178:	cf 5f       	subi	r28, 0xFF	; 255
		}
		if (start>99)
 17a:	c4 36       	cpi	r28, 0x64	; 100
 17c:	10 f7       	brcc	.-60     	; 0x142 <set_start+0x6>
 17e:	e2 cf       	rjmp	.-60     	; 0x144 <set_start+0x8>
 180:	2f e7       	ldi	r18, 0x7F	; 127
 182:	89 ea       	ldi	r24, 0xA9	; 169
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <set_start+0x4a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <set_start+0x54>
 190:	00 00       	nop
	}
	
	
	
	
}
 192:	8c 2f       	mov	r24, r28
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <main>:

int main(void)
{
	DDRA=0XFF;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0XFF;
 19c:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;
 19e:	84 bb       	out	0x14, r24	; 20
	DDRD=0X00;
 1a0:	11 ba       	out	0x11, r1	; 17

	PIND=0xff;
 1a2:	80 bb       	out	0x10, r24	; 16

	PORTD=0xff;
 1a4:	82 bb       	out	0x12, r24	; 18
	PORTA=0XFF;
 1a6:	8b bb       	out	0x1b, r24	; 27
	PORTC=0X0;
 1a8:	15 ba       	out	0x15, r1	; 21

	char flag_s=0,flag_p=0,flag=0,x,start=85,i;
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f5 e5       	ldi	r31, 0x55	; 85
 1ae:	ff 2e       	mov	r15, r31
 1b0:	f0 2d       	mov	r31, r0
 1b2:	00 e0       	ldi	r16, 0x00	; 0
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	10 e0       	ldi	r17, 0x00	; 0

	while (1)
	{	
		if (!READ_BIT(PIND,3))
 1b8:	83 99       	sbic	0x10, 3	; 16
 1ba:	10 c0       	rjmp	.+32     	; 0x1dc <main+0x44>
		{
			while(!READ_BIT(PIND,3));
 1bc:	83 9b       	sbis	0x10, 3	; 16
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <main+0x24>
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	30 e7       	ldi	r19, 0x70	; 112
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	30 40       	sbci	r19, 0x00	; 0
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x2e>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x38>
 1d0:	00 00       	nop
			_delay_ms(100);
			start=set_start(start);
 1d2:	8f 2d       	mov	r24, r15
 1d4:	0e 94 9e 00 	call	0x13c	; 0x13c <set_start>
 1d8:	f8 2e       	mov	r15, r24
 1da:	d8 2f       	mov	r29, r24
			x=start;
			
		}
		
		segment_display(x);
 1dc:	8d 2f       	mov	r24, r29
 1de:	0e 94 41 00 	call	0x82	; 0x82 <segment_display>
		
		
		if (x==0)
 1e2:	d1 11       	cpse	r29, r1
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <main+0x50>
		{
			x=start;
 1e6:	df 2d       	mov	r29, r15
		}

		if (!READ_BIT(PIND,4))
 1e8:	84 99       	sbic	0x10, 4	; 16
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <main+0x5a>
		{
			while(!READ_BIT(PIND,4));
 1ec:	84 9b       	sbis	0x10, 4	; 16
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <main+0x54>
			flag_s=1;
 1f0:	11 e0       	ldi	r17, 0x01	; 1
		}
		if (flag_s==1)
 1f2:	11 30       	cpi	r17, 0x01	; 1
 1f4:	81 f4       	brne	.+32     	; 0x216 <main+0x7e>
		{
			x=start;
			if (!READ_BIT(PIND,5))
 1f6:	85 99       	sbic	0x10, 5	; 16
 1f8:	13 c0       	rjmp	.+38     	; 0x220 <main+0x88>
			{
				while(!READ_BIT(PIND,5));
 1fa:	85 9b       	sbis	0x10, 5	; 16
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <main+0x62>
 1fe:	9f e7       	ldi	r25, 0x7F	; 127
 200:	28 e3       	ldi	r18, 0x38	; 56
 202:	31 e0       	ldi	r19, 0x01	; 1
 204:	91 50       	subi	r25, 0x01	; 1
 206:	20 40       	sbci	r18, 0x00	; 0
 208:	30 40       	sbci	r19, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0x6c>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x76>
 20e:	00 00       	nop
				_delay_ms(50);
				flag_s++;
 210:	1f 5f       	subi	r17, 0xFF	; 255
			while(!READ_BIT(PIND,4));
			flag_s=1;
		}
		if (flag_s==1)
		{
			x=start;
 212:	df 2d       	mov	r29, r15
 214:	06 c0       	rjmp	.+12     	; 0x222 <main+0x8a>
			}

		}
		else
		{
			if (flag)
 216:	01 11       	cpse	r16, r1
			{
				x--;
 218:	d1 50       	subi	r29, 0x01	; 1
			}
			flag^=1;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	08 27       	eor	r16, r24
 21e:	01 c0       	rjmp	.+2      	; 0x222 <main+0x8a>
			while(!READ_BIT(PIND,4));
			flag_s=1;
		}
		if (flag_s==1)
		{
			x=start;
 220:	df 2d       	mov	r29, r15
		}




		if (!READ_BIT(PIND,5))
 222:	85 99       	sbic	0x10, 5	; 16
 224:	0e c0       	rjmp	.+28     	; 0x242 <main+0xaa>
		{
			while(!READ_BIT(PIND,5));
 226:	85 9b       	sbis	0x10, 5	; 16
 228:	fe cf       	rjmp	.-4      	; 0x226 <main+0x8e>
			flag_p^=1;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	c8 27       	eor	r28, r24
 22e:	09 c0       	rjmp	.+18     	; 0x242 <main+0xaa>
		}

		while (flag_p==1)
		{
			segment_display(x);
 230:	8d 2f       	mov	r24, r29
 232:	0e 94 41 00 	call	0x82	; 0x82 <segment_display>
			if (!READ_BIT(PIND,5))
 236:	85 99       	sbic	0x10, 5	; 16
 238:	04 c0       	rjmp	.+8      	; 0x242 <main+0xaa>
			{
				while(!READ_BIT(PIND,5));
 23a:	85 9b       	sbis	0x10, 5	; 16
 23c:	fe cf       	rjmp	.-4      	; 0x23a <main+0xa2>
				flag_p^=1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	c8 27       	eor	r28, r24
		{
			while(!READ_BIT(PIND,5));
			flag_p^=1;
		}

		while (flag_p==1)
 242:	c1 30       	cpi	r28, 0x01	; 1
 244:	a9 f3       	breq	.-22     	; 0x230 <main+0x98>
				while(!READ_BIT(PIND,5));
				flag_p^=1;
			}

		}
		if (x==0)
 246:	dd 23       	and	r29, r29
 248:	d9 f0       	breq	.+54     	; 0x280 <main+0xe8>
 24a:	b6 cf       	rjmp	.-148    	; 0x1b8 <main+0x20>
		{
			x=0;
			for (i=0;i<5;i++)
			{
				SET_BIT(PORTC,5);
 24c:	85 b3       	in	r24, 0x15	; 21
 24e:	80 62       	ori	r24, 0x20	; 32
 250:	85 bb       	out	0x15, r24	; 21
 252:	8f e7       	ldi	r24, 0x7F	; 127
 254:	2a e1       	ldi	r18, 0x1A	; 26
 256:	36 e0       	ldi	r19, 0x06	; 6
 258:	81 50       	subi	r24, 0x01	; 1
 25a:	20 40       	sbci	r18, 0x00	; 0
 25c:	30 40       	sbci	r19, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0xc0>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0xca>
 262:	00 00       	nop
				_delay_ms(250);
				CLEAR_BIT(PORTC,5);
 264:	85 b3       	in	r24, 0x15	; 21
 266:	8f 7d       	andi	r24, 0xDF	; 223
 268:	85 bb       	out	0x15, r24	; 21
 26a:	8f e7       	ldi	r24, 0x7F	; 127
 26c:	2a e1       	ldi	r18, 0x1A	; 26
 26e:	36 e0       	ldi	r19, 0x06	; 6
 270:	81 50       	subi	r24, 0x01	; 1
 272:	20 40       	sbci	r18, 0x00	; 0
 274:	30 40       	sbci	r19, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0xd8>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0xe2>
 27a:	00 00       	nop

		}
		if (x==0)
		{
			x=0;
			for (i=0;i<5;i++)
 27c:	9f 5f       	subi	r25, 0xFF	; 255
 27e:	01 c0       	rjmp	.+2      	; 0x282 <main+0xea>
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	95 30       	cpi	r25, 0x05	; 5
 284:	18 f3       	brcs	.-58     	; 0x24c <main+0xb4>
				_delay_ms(250);
				CLEAR_BIT(PORTC,5);
				_delay_ms(250);
				
			}
			x=start;
 286:	df 2d       	mov	r29, r15
			flag_p=1;
 288:	c1 e0       	ldi	r28, 0x01	; 1
 28a:	96 cf       	rjmp	.-212    	; 0x1b8 <main+0x20>

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
